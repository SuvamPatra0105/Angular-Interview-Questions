1. Differentiate between Observables and Promises.
--> 

Observables--- Emit multiple values over a period of time.
Promises--- Emit a single value at a time.

Observables--- Are lazy: they’re not executed until we subscribe to them using the subscribe() method.
Promises--- Are not lazy(eager): execute immediately after creation.

Observables: Have subscriptions that are cancellable using the unsubscribe() method, which stops the listener from receiving further values.
Promises: Are not cancellable.

Observables--- Provide the map for forEach, filter, reduce, retry, and retryWhen operators.
Promises--- Don’t provide any operations.

Observables--- Have 3 callbacks/callback functions(success, error, complete).
Promises--- Have 2 callbacks/callback functions(success, error).


2. What are callbacks/callback functions? Give example.
--> A callback is a function that is passed as an argument to another function that executes the callback based on the result. They are basically functions that are executed only after a result is produced or an asynchronous task is completed. Callbacks are an important part of asynchronous JavaScript.

Example: 
function myDisplayer(some) {
  document.getElementById("demo").innerHTML = some;
}

function myCalculator(num1, num2, myCallback) {
  let sum = num1 + num2;
  myCallback(sum);
}

myCalculator(5, 5, myDisplayer);    ---> myDisplayer is the callback function. It is passed to myCalculator() as an argument.

Alternate Example:
setTimeout(myFunction, 3000);    ---> myFunction is the callback function. It is passed to setTimeout() as an argument.

function myFunction() {
  console.log('Hello');
}
